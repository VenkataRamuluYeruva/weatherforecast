{"ast":null,"code":"var _jsxFileName = \"D:\\\\Reactjs Projects\\\\weather\\\\src\\\\WeatherForecast.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherForecast = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function getWeatherData() {\n      try {\n        const response = await fetch('https://api.openweathermap.org/data/2.5/forecast?q=delhi&appid=094b8fd5531e1870279f58b241957f6f&units=metric');\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const data = await response.json();\n        setData(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getWeatherData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  const {\n    city,\n    list\n  } = data;\n  const {\n    name,\n    coord,\n    country\n  } = city;\n  const {\n    lat,\n    lon\n  } = coord;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-forecast\",\n    style: {\n      position: 'absolute'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Weather Forecast for \", name, \", \", country]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Latitude: \", lat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Longitude: \", lon]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-list\",\n      children: list.map((forecast, index) => {\n        const {\n          dt_txt,\n          main,\n          weather,\n          wind,\n          pop\n        } = forecast;\n        const {\n          temp\n        } = main;\n        const {\n          description\n        } = weather[0];\n        const {\n          speed\n        } = wind;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: new Date(dt_txt).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", temp, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Weather: \", description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Wind Speed: \", speed, \" m/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Precipitation Probability: \", pop * 100, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherForecast, \"RiL7vLwmC7ZWXKL/bXt2EIBjBYk=\");\n_c = WeatherForecast;\nexport default WeatherForecast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WeatherForecast","_s","data","setData","loading","setLoading","error","setError","getWeatherData","response","fetch","ok","Error","json","message","children","fileName","_jsxFileName","lineNumber","columnNumber","city","list","name","coord","country","lat","lon","className","style","position","map","forecast","index","dt_txt","main","weather","wind","pop","temp","description","speed","Date","toLocaleString","_c","$RefreshReg$"],"sources":["D:/Reactjs Projects/weather/src/WeatherForecast.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst WeatherForecast = () => {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function getWeatherData() {\r\n      try {\r\n        const response = await fetch('https://api.openweathermap.org/data/2.5/forecast?q=delhi&appid=094b8fd5531e1870279f58b241957f6f&units=metric');\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch data');\r\n        }\r\n        const data = await response.json();\r\n        setData(data);\r\n      } catch (error) {\r\n        setError(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    getWeatherData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>Error: {error}</div>;\r\n  }\r\n\r\n  const { city, list } = data;\r\n  const { name, coord, country } = city;\r\n  const { lat, lon } = coord;\r\n\r\n  return (\r\n    <div className=\"weather-forecast\" style={{position:'absolute'}}>\r\n      <h1>Weather Forecast for {name}, {country}</h1>\r\n      <p>Latitude: {lat}</p>\r\n      <p>Longitude: {lon}</p>\r\n      <div className=\"forecast-list\">\r\n        {list.map((forecast, index) => {\r\n          const { dt_txt, main, weather, wind, pop } = forecast;\r\n          const { temp } = main;\r\n          const { description } = weather[0];\r\n          const { speed } = wind;\r\n\r\n          return (\r\n            <div key={index} className=\"forecast-item\">\r\n              <h2>{new Date(dt_txt).toLocaleString()}</h2>\r\n              <p>Temperature: {temp}Â°C</p>\r\n              <p>Weather: {description}</p>\r\n              <p>Wind Speed: {speed} m/s</p>\r\n              <p>Precipitation Probability: {pop * 100}%</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}