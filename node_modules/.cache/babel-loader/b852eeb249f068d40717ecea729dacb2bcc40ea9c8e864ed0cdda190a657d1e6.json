{"ast":null,"code":"var _jsxFileName = \"D:\\\\Reactjs Projects\\\\weather\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import WeatherForecast from './Components/WeatherForecast';\n// import MobileWeather from './Components/MobileWeather';\n// import WeatherInput from './Components/weatherInput';\n\n// function App() {\n//   const [data, setData] = useState({});\n//   const [location, setLocation] = useState('Hyderabad');\n//   const [temperature, setTemperature] = useState(0);\n//   const [description, setDescription] = useState('');\n\n//   useEffect(() => {\n//     getWeatherData(location);\n//   }, []);\n\n//   async function getWeatherData(location) {\n//     try {\n//       const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=094b8fd5531e1870279f58b241957f6f`);\n\n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       const data = await response.json();\n//       setData(data);\n//       setLocation(data.city.name);\n//       setDescription(data.list[0].weather[0].description);\n\n//       // Extract today's weather details\n//       const today = new Date().getDate();\n//       const todayWeather = data.list.find(item => new Date(item.dt * 1000).getDate() === today);\n\n//       const temperatureInCelsius = todayWeather.main.temp - 273.15;\n//       setTemperature(temperatureInCelsius.toFixed(2));\n\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//     }\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div className='title'>Weather Forecast for {location}</div>\n//       {/* <WeatherInput getWeatherData={getWeatherData}/>\n//       <MobileWeather location={location} temperature={temperature} description={description}/> */}\n//       <WeatherForecast data={data}/>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport './App.css';\nimport WeatherForecast from './WeatherForecast';\nimport MobileWeather from './Components/MobileWeather';\nimport WeatherInput from './Components/weatherInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState({});\n  const [location, setLocation] = useState(undefined);\n  const [description, setDescription] = useState('');\n  const [todayWeather, setTodayWeather] = useState({});\n  const [temperature, setTemperature] = useState('');\n  async function getWeatherData(location) {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=094b8fd5531e1870279f58b241957f6f`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setData(data);\n      setLocation(data.city.name);\n      setDescription(data.list[0].weather[0].description);\n\n      // Extract today's weather details\n      const today = new Date().getDate();\n      const todayWeather = data.list.find(item => new Date(item.dt * 1000).getDate() === today);\n      setTodayWeather(todayWeather);\n\n      // Convert temperature from Kelvin to Celsius\n      const temperatureInCelsius = todayWeather.main.temp - 273.15;\n      setTemperature(temperatureInCelsius.toFixed(2)); // Optional: rounding to 2 decimal places\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [\"Weather Forecast for \", location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherInput, {\n      getWeatherData: getWeatherData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MobileWeather, {\n      location: location,\n      temperature: temperature,\n      description: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherForecast, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0bhrLTZwVJ17zWaKHV96aFdG1wM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","WeatherForecast","MobileWeather","WeatherInput","jsxDEV","_jsxDEV","App","_s","data","setData","location","setLocation","undefined","description","setDescription","todayWeather","setTodayWeather","temperature","setTemperature","getWeatherData","response","fetch","ok","Error","status","json","city","name","list","weather","today","Date","getDate","find","item","dt","temperatureInCelsius","main","temp","toFixed","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Reactjs Projects/weather/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import WeatherForecast from './Components/WeatherForecast';\n// import MobileWeather from './Components/MobileWeather';\n// import WeatherInput from './Components/weatherInput';\n\n// function App() {\n//   const [data, setData] = useState({});\n//   const [location, setLocation] = useState('Hyderabad');\n//   const [temperature, setTemperature] = useState(0);\n//   const [description, setDescription] = useState('');\n\n//   useEffect(() => {\n//     getWeatherData(location);\n//   }, []);\n\n//   async function getWeatherData(location) {\n//     try {\n//       const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=094b8fd5531e1870279f58b241957f6f`);\n        \n//       if (!response.ok) {\n//         throw new Error(`HTTP error! status: ${response.status}`);\n//       }\n//       const data = await response.json();\n//       setData(data);\n//       setLocation(data.city.name);\n//       setDescription(data.list[0].weather[0].description);\n\n//       // Extract today's weather details\n//       const today = new Date().getDate();\n//       const todayWeather = data.list.find(item => new Date(item.dt * 1000).getDate() === today);\n\n//       const temperatureInCelsius = todayWeather.main.temp - 273.15;\n//       setTemperature(temperatureInCelsius.toFixed(2));\n\n//     } catch (error) {\n//       console.error('Error fetching weather data:', error);\n//     }\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div className='title'>Weather Forecast for {location}</div>\n//       {/* <WeatherInput getWeatherData={getWeatherData}/>\n//       <MobileWeather location={location} temperature={temperature} description={description}/> */}\n//       <WeatherForecast data={data}/>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport './App.css';\nimport WeatherForecast from './WeatherForecast';\nimport MobileWeather from './Components/MobileWeather';\nimport WeatherInput from './Components/weatherInput';\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [location, setLocation] = useState(undefined);\n  const [description, setDescription] = useState('');\n  const [todayWeather, setTodayWeather] = useState({});\n  const [temperature, setTemperature] = useState('');\n\n  async function getWeatherData(location) {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=094b8fd5531e1870279f58b241957f6f`);\n        \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setData(data);\n      setLocation(data.city.name);\n      setDescription(data.list[0].weather[0].description);\n\n      // Extract today's weather details\n      const today = new Date().getDate();\n      const todayWeather = data.list.find(item => new Date(item.dt * 1000).getDate() === today);\n      setTodayWeather(todayWeather);\n\n      // Convert temperature from Kelvin to Celsius\n      const temperatureInCelsius = todayWeather.main.temp - 273.15;\n      setTemperature(temperatureInCelsius.toFixed(2)); // Optional: rounding to 2 decimal places\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='title'>Weather Forecast for {location}</div>\n      <WeatherInput getWeatherData={getWeatherData} />\n      <MobileWeather location={location} temperature={temperature} description={description} />\n      <WeatherForecast data={data} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}