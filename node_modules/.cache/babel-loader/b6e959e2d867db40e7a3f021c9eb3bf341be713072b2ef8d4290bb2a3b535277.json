{"ast":null,"code":"var _jsxFileName = \"D:\\\\Reactjs Projects\\\\weather\\\\src\\\\Components\\\\WeatherForecast.js\";\nimport React from 'react';\nimport './WeatherForecast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WeatherForecast({\n  data\n}) {\n  if (!data.city || !data.list) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 12\n    }, this);\n  }\n  const {\n    city,\n    list\n  } = data;\n  const {\n    name,\n    coord,\n    country\n  } = city;\n  const {\n    lat,\n    lon\n  } = coord;\n\n  // Function to convert Kelvin to Celsius\n  const convertToCelsius = temp => (temp - 273.15).toFixed(2);\n\n  // Function to filter weather data for a specific time each day\n  const filterWeatherDataByTime = (list, targetHour) => {\n    const filteredData = [];\n    const dates = new Set();\n    list.forEach(item => {\n      const date = new Date(item.dt * 1000);\n      const hour = date.getUTCHours();\n      if (hour === targetHour && !dates.has(date.toDateString())) {\n        dates.add(date.toDateString());\n        filteredData.push(item);\n      }\n    });\n    return filteredData;\n  };\n\n  // Get weather data for 12:00 PM (noon) each day\n  const filteredData = filterWeatherDataByTime(list, 12);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"weather-forecast\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast-list\",\n      children: filteredData.map((forecast, index) => {\n        const {\n          dt_txt,\n          main,\n          weather,\n          wind,\n          pop\n        } = forecast;\n        const {\n          temp\n        } = main;\n        const {\n          description\n        } = weather[0];\n        const {\n          speed\n        } = wind;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            cl: true,\n            children: [\"Temperature: \", convertToCelsius(temp), \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/images/${description}.png`,\n            alt: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Weather: \", description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: new Date(dt_txt).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Wind Speed: \", speed, \" m/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c = WeatherForecast;\nexport default WeatherForecast;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecast\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WeatherForecast","data","city","list","children","fileName","_jsxFileName","lineNumber","columnNumber","name","coord","country","lat","lon","convertToCelsius","temp","toFixed","filterWeatherDataByTime","targetHour","filteredData","dates","Set","forEach","item","date","Date","dt","hour","getUTCHours","has","toDateString","add","push","className","map","forecast","index","dt_txt","main","weather","wind","pop","description","speed","cl","src","alt","toLocaleDateString","_c","$RefreshReg$"],"sources":["D:/Reactjs Projects/weather/src/Components/WeatherForecast.js"],"sourcesContent":["import React from 'react';\r\nimport './WeatherForecast.css';\r\nfunction WeatherForecast({ data }) {\r\n  if (!data.city || !data.list) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  const { city, list } = data;\r\n  const { name, coord, country } = city;\r\n  const { lat, lon } = coord;\r\n\r\n  // Function to convert Kelvin to Celsius\r\n  const convertToCelsius = (temp) => (temp - 273.15).toFixed(2);\r\n\r\n  // Function to filter weather data for a specific time each day\r\n  const filterWeatherDataByTime = (list, targetHour) => {\r\n    const filteredData = [];\r\n    const dates = new Set();\r\n\r\n    list.forEach((item) => {\r\n      const date = new Date(item.dt * 1000);\r\n      const hour = date.getUTCHours();\r\n\r\n      if (hour === targetHour && !dates.has(date.toDateString())) {\r\n        dates.add(date.toDateString());\r\n        filteredData.push(item);\r\n      }\r\n    });\r\n\r\n    return filteredData;\r\n  };\r\n\r\n  // Get weather data for 12:00 PM (noon) each day\r\n  const filteredData = filterWeatherDataByTime(list, 12);\r\n\r\n  return (\r\n    <div className=\"weather-forecast\">\r\n      <div className=\"forecast-list\">\r\n        {filteredData.map((forecast, index) => {\r\n          const { dt_txt, main, weather, wind, pop } = forecast;\r\n          const { temp } = main;\r\n          const { description } = weather[0];\r\n          const { speed } = wind;\r\n\r\n          return (\r\n            <div key={index} className=\"forecast-item\">\r\n              <p cl>Temperature: {convertToCelsius(temp)}Â°C</p>\r\n              <img src={`/images/${description}.png`} alt={description} />\r\n              <p>Weather: {description}</p>\r\n              <h2>{new Date(dt_txt).toLocaleDateString()}</h2>\r\n              <p>Wind Speed: {speed} m/s</p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherForecast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}